@model IEnumerable<AppDelBagno.Models.Bagno>

@{
    ViewData["Title"] = "Index";
}


<h1>Gestione Bagno</h1>

@if (ViewBag.bagno != null && ViewBag.bagno.Utente != Environment.UserName)
{
    <h5>Bagno occupato da: @ViewBag.bagno.Utente</h5>
}

@*
ViewBag.bagno = is_Bloccato();
ViewBag.Coda = await _context.Coda.ToListAsync();
ViewBag.SonoInCoda = IAmInQueue();
ViewBag.FirstQueue = FirstInQueue();
*@

@if((ViewBag.FirstQueue == null && ViewBag.bagno == null)
|| (ViewBag.FirstQueue != null && ViewBag.bagno == null && ViewBag.FirstQueue.Username == Environment.UserName))
{
    <a asp-action="LockBagno"><button id="LockBagno" class="btn btn-success">Blocca</button></a>
}
else if (ViewBag.bagno != null &&  ViewBag.bagno.Utente != Environment.UserName)
{
    @if (!ViewBag.SonoInCoda)
    {
        <a asp-action="AddMeToQueue"><button id="AddMeToQueue" class="btn btn-success">Aggiungimi in coda</button></a>
    }
    else{
        <a asp-action="DeleteMeToQueue"><button id="DeleteMeToQueue" class="btn btn-danger">Rimuovi dalla coda</button></a>
    }
}
else if (ViewBag.bagno != null &&  ViewBag.bagno.Utente == Environment.UserName)
{
    <a asp-action="UnlockBagno"><button id="UnlockBagno" class="btn btn-danger">Sblocca</button></a>
}








<table class="table" id="QueueTable">
    <thead>
        <tr>
            <th>
                Utente
            </th>
            <th>
                Ora prenotazione
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (Coda item in ViewBag.Coda) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Utente)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.datetime)
            </td>

        </tr>
        }
    </tbody>
</table>





    
<!--Script references. -->
<!--Reference the SignalR library. -->
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>
<script>
 
        var name = "";

        var connection = new signalR.HubConnectionBuilder().withUrl('/chat').build();
        connection.on('broadcastMessage', function(name, message) {
            if(message == "reload"){
                setTimeout(
                  function() 
                  {
                                location.reload();
                  }, 500);

            }
        });

        connection.start().then(function() {
        // Wire up Send button to call NewContosoChatMessage on the server.
            $('#AddMeToQueue').click(function () {
                connection.invoke('send', name, "reload");
            });
            
        // Wire up Send button to call NewContosoChatMessage on the server.
            $('#DeleteMeToQueue').click(function () {
                connection.invoke('send', name, "reload");
            });
        // Wire up Send button to call NewContosoChatMessage on the server.
            $('#UnlockBagno').click(function () {
                connection.invoke('send', name, "reload");
            });
        // Wire up Send button to call NewContosoChatMessage on the server.
            $('#LockBagno').click(function () {
                connection.invoke('send', name, "reload");
            });
        });


  

</script>

<!--Add script to update the page and send messages.-->
<script>


    //document.addEventListener('DOMContentLoaded', function () {



    //    // Get the user name and store it to prepend to messages.
    //    var name = "malemale";
    //    // Set initial focus to message input box.

    //    // Start the connection.
    //    var connection = new signalR.HubConnectionBuilder()
    //                        .withUrl('/chat')
    //                        .build();

    //    // Create a function that the hub can call to broadcast messages.
    //    connection.on('broadcastMessage', function (name, message) {


    //        if(message == "reload")
    //        {  
    //            location.reload(true);
    //        }
            
    //    });

    //    // Transport fallback functionality is now built into start.
    //    connection.start().then(function () {
    //            console.log('connection started');
    //            document.getElementById('LockBagno').addEventListener('click', function (event) {
    //                connection.invoke('send', name, "reload");
    //            });
    //            document.getElementById('UnlockBagno').addEventListener('click', function (event) {
    //                connection.invoke('send', name, "reload");
    //            });
    //            document.getElementById('DeleteMeToQueue').addEventListener('click', function (event) {
    //                connection.invoke('send', name, "reload");
    //            });
    //            document.getElementById('AddMeToQueue').addEventListener('click', function (event) {
    //                connection.invoke('send', name, "reload");
    //            });
    //    })
    //    .catch(error => {
    //        console.error(error.message);
    //    });
    //});
</script>